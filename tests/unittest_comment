import os
import sys

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from main import app

import unittest
from fastapi.testclient import TestClient
from src.database.db import get_db
from src.schemas.comment import CommentRequest

class TestCommentRoutes(unittest.TestCase):
    def setUp(self):
        self.client = TestClient(app)

    def test_create_comment(self):
        comment_req = CommentRequest(content="Test comment")
        print("/comments/", comment_req.dict(by_alias=True))
        response = self.client.post("/comments/", json=comment_req.model_dump())
        print(response.json())
        self.assertEqual(response.status_code, 200)
        created_comment_id = response.json()['id']
        # Перевірка, чи коментар зберігається в базі даних
        with get_db() as db:
            db_comment = db.query(Comment).filter(Comment.id == created_comment_id).first()
            self.assertIsNotNone(db_comment)
            self.assertEqual(db_comment.content, "Test comment")

    def test_get_comment(self):
        comment_req = CommentRequest(content="Test comment")
        print("/comments/", comment_req.dict(by_alias=True))
        response = self.client.post("/comments/", json=comment_req.dict(by_alias=True))
        print(response.json())
        created_comment_id = response.json()['id']
        print("/comments/", comment_req.dict(by_alias=True))
        response = self.client.get(f"/comments/{created_comment_id}")
        print(response.json())
        self.assertEqual(response.status_code, 200)
        retrieved_comment = response.json()
        self.assertEqual(retrieved_comment["id"], created_comment_id)
        self.assertEqual(retrieved_comment["content"], "Test comment")

    def test_update_comment(self):
        comment_req = CommentRequest(content="Test comment")
        print("/comments/", comment_req.dict(by_alias=True))
        response = self.client.post("/comments/", json=comment_req.dict(by_alias=True))
        print(response.json())
        created_comment_id = response.json()['id']
        updated_content = "Updated comment"
        updated_comment_req = CommentRequest(content=updated_content)
        print("/comments/", comment_req.dict(by_alias=True))
        response = self.client.put(f"/comments/{created_comment_id}", json=updated_comment_req.model_dump())
        print(response.json())
        self.assertEqual(response.status_code, 200)
        updated_comment = response.json()
        self.assertIsNotNone(updated_comment)
        self.assertEqual(updated_comment["id"], created_comment_id)
        self.assertEqual(updated_comment["content"], updated_content)

    def test_delete_comment(self):
        comment_req = CommentRequest(content="Test comment")
        print("/comments/", comment_req.dict(by_alias=True))
        response = self.client.post("/comments/", json=comment_req.dict(by_alias=True))
        print(response.json())
        created_comment_id = response.json()['id']
        print("/comments/", comment_req.dict(by_alias=True))
        response = self.client.delete(f"/comments/{created_comment_id}")
        print(response.json())
        self.assertEqual(response.status_code, 200)
        deleted_comment = response.json()
        self.assertIsNotNone(deleted_comment)
        self.assertEqual(deleted_comment["id"], created_comment_id)
        # Перевірка, чи коментар більше не зберігається в базі даних
        with get_db() as db:
            db_comment = db.query(Comment).filter(Comment.id == created_comment_id).first()
            self.assertIsNone(db_comment)


if __name__ == '__main__':
    unittest.main()

